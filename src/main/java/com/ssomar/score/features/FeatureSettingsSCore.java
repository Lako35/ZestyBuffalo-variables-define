package com.ssomar.score.features;

import com.ssomar.score.languages.messages.TM;
import com.ssomar.score.languages.messages.Text;
import com.ssomar.score.menu.GUI;
import com.ssomar.score.utils.FixedMaterial;
import org.bukkit.Material;

import java.util.Arrays;
import java.util.Collections;

public enum FeatureSettingsSCore implements FeatureSettingsInterface {
    enableArmorTrim("enableArmorTrim", "Enable Armor Trim", new String[]{"&7&oEnable armor trim"}, null, false),
    ifCrossbowMustBeCharged("ifCrossbowMustBeCharged", "If crossbow must be charged", new String[]{}, Material.CROSSBOW, false),
    activeTitle("activeTitle", "Active Title", new String[]{"&7&oActive the title"}, null, true),
    cancelEventIfNoPermission("cancelEventIfNoPermission", "Cancel Event If No Permission", new String[]{"&7&oCancel the event if the player has no permission"}, null, false),
    ifContainerContainsSellableItems("ifContainerContainsSellableItems", "If container contains sellable items", new String[]{}, Material.ANVIL, false),
    ifContainerEmpty("ifContainerEmpty", "If container empty", new String[]{}, Material.ANVIL, false),
    ifContainerNotEmpty("ifContainerNotEmpty", "If container not empty", new String[]{}, Material.ANVIL, false),
    ifIsPowered("ifIsPowered", "If is powered", new String[]{}, Material.ANVIL, false),
    ifContainerContains("ifContainerContains", "If container contains", new String[]{}, Material.ANVIL, false),
    ifContainerContainsEI("ifContainerContainsEI", "If container contains EI", new String[]{}, Material.ANVIL, false),
    ifMustBeNatural(" ifMustBeNatural", " If must be natural", new String[]{},  Material.ANVIL,  false),
    ifMustBeNotNatural(" ifMustBeNotNatural", " If must be not natural", new String[]{},  Material.ANVIL,  false),
    ifMustBeNotPowered(" ifMustBeNotPowered", " If must be not powered", new String[]{},  Material.ANVIL,  false),
    ifNoPlayerMustBeOnTheBlock(" ifNoPlayerMustBeOnTheBlock", " If no player must be on the block", new String[]{},  Material.ANVIL,  false),
    ifPlantFullyGrown(" ifPlantFullyGrown", " If plant fully grown", new String[]{},  Material.ANVIL,  false),
    ifPlantNotFullyGrown(" ifPlantNotFullyGrown", " If plant not fully grown", new String[]{},  Material.ANVIL,  false),
    ifPlayerMustBeOnTheBlock(" ifPlayerMustBeOnTheBlock", " If player must be on the block", new String[]{},  Material.ANVIL,  false),
    ifNeedPlayerConfirmation(" ifNeedPlayerConfirmation", " If need player confirmation", new String[]{},  null,  false),
    ifNotOwnerOfTheEI(" ifNotOwnerOfTheEI", " If not owner of the EI", new String[]{},  null,  false),
    ifOwnerOfTheEI(" ifOwnerOfTheEI", " If owner of the EI", new String[]{},  null,  false),
    ifAdult(" ifAdult", " If adult", new String[]{},  Material.ANVIL,  false),
    ifBaby(" ifBaby", " If baby", new String[]{},  Material.ANVIL,  false),
    ifFromSpawner(" ifFromSpawner", " If from spawner", new String[]{},  Material.ANVIL,  false),
    ifFrozen(" ifFrozen", " If frozen", new String[]{},  Material.ANVIL,  false),
    ifGlowing(" ifGlowing", " If glowing", new String[]{},  Material.ANVIL,  false),
    ifHasAI(" ifHasAI", " If has AI", new String[]{},  Material.ANVIL,  false),
    ifHasSaddle(" ifHasSaddle", " If has Saddle", new String[]{},  Material.ANVIL,  false),
    ifInvulnerable(" ifInvulnerable", " If invulnerable", new String[]{},  Material.ANVIL,  false),
    ifNamed(" ifNamed", " If named", new String[]{},  Material.ANVIL,  false),
    ifNotFromSpawner(" ifNotFromSpawner", " If not from spawner", new String[]{},  Material.ANVIL,  false),
    ifNotHasAI(" ifNotHasAI", " If has not AI", new String[]{},  Material.ANVIL,  false),
    ifNotHasSaddle(" ifNotHasSaddle", " If not has Saddle", new String[]{},  Material.ANVIL,  false),
    ifNotNamed(" ifNotNamed", " If not named", new String[]{},  Material.ANVIL,  false),
    ifNotTamed(" ifNotTamed", " If not tamed", new String[]{},  Material.ANVIL,  false),
    ifOnFire(" ifOnFire", " If on fire", new String[]{},  Material.ANVIL,  false),
    ifPowered(" ifPowered", " If powered", new String[]{},  Material.ANVIL,  false),
    ifTamed(" ifTamed", " If tamed", new String[]{},  Material.ANVIL,  false),
    ifCrossbowMustNotBeCharged(" ifCrossbowMustNotBeCharged", " If crossbow must not be charged", new String[]{},  Material.CROSSBOW,  false),
    ifBlocking(" ifBlocking", " If blocking", new String[]{},  null,  false),
    ifCanBreakTargetedBlock(" ifCanBreakTargetedBlock", " If Can Break Targeted Block", new String[]{},  Material.ANVIL,  false),
    ifFlying(" ifFlying", " If flying", new String[]{},  null,  false),
    ifGliding(" ifGliding", " If gliding", new String[]{},  null,  false),
    ifIsInTheAir(" ifIsInTheAir", " If is in the air", new String[]{},  null,  false),
    ifIsNotInTheAir(" ifIsNotInTheAir", " If is not in the air", new String[]{},  null,  false),
    ifIsNotOnFire(" ifIsNotOnFire", " If is not on fire", new String[]{},  null,  false),
    ifIsOnFire(" ifIsOnFire", " If is on fire", new String[]{},  null,  false),
    ifNotBlocking(" ifNotBlocking", " If not blocking", new String[]{},  null,  false),
    ifNotFlying(" ifNotFlying", " If not flying", new String[]{},  null,  false),
    ifNotGliding(" ifNotGliding", " If not gliding", new String[]{},  null,  false),
    ifNotSneaking(" ifNotSneaking", " If not sneaking", new String[]{},  null,  false),
    ifNotSprinting(" ifNotSprinting", " If not sprinting", new String[]{},  null,  false),
    ifNotStunned(" ifNotStunned", " If not stunned", new String[]{"&7&oBy the custom player", "&7&ocommand &eSTUN_ENABLE"},  null,  false),
    ifNotSwimming(" ifNotSwimming", " If not swimming", new String[]{},  null,  false),
    ifPlayerMustBeInHisTown(" ifPlayerMustBeInHisTown", " If player must be in his town", new String[]{},  null,  false),
    ifPlayerMustBeOnHisClaim(" ifPlayerMustBeOnHisClaim", " If player must be on his claim", new String[]{},  null,  false),
    ifPlayerMustBeOnHisClaimOrWilderness(" ifPlayerMustBeOnHisClaimOrWilderness", " If player must be on his claim or wilderness", new String[]{},  null,  false),
    ifPlayerMustBeOnHisIsland(" ifPlayerMustBeOnHisIsland", " If player must be on his island", new String[]{},  null,  false),
    ifPlayerMustBeOnHisPlot(" ifPlayerMustBeOnHisPlot", " If player must be on his plot", new String[]{},  null,  false),
    ifSneaking(" ifSneaking", " If sneaking", new String[]{},  null,  false),
    ifSprinting(" ifSprinting", " If sprinting", new String[]{},  null,  false),
    ifStunned(" ifStunned", " If stunned", new String[]{"&7&oBy the custom player", "&7&ocommand &eSTUN_ENABLE"},  null,  false),
    ifSwimming(" ifSwimming", " If swimming", new String[]{},  null,  false),
    ifCursorDistance(" ifCursorDistance", " If cursor distance", new String[]{},  Material.ANVIL,  false),
    ifHasExecutableItems(" ifHasExecutableItems", " If has ExecutableItems", new String[]{},  Material.DIAMOND,  false),
    ifHasNotExecutableItems(" ifHasNotExecutableItems", " If has not ExecutableItems", new String[]{},  Material.DIAMOND,  false),
    ifHasItems(" ifHasItems", " If has items", new String[]{},  Material.STONE,  false),
    ifHasNotItems(" ifHasNotItems", " If has not items", new String[]{},  Material.STONE,  false),
    ifHasPermission(" ifHasPermission", " If has permission", new String[]{},  Material.ANVIL,  false),
    ifHasTag(" ifHasTag", " If has tag", new String[]{"&7&oThe whitelisted tags"},  Material.ANVIL,  false),
    ifInBiome(" ifInBiome", " If in biome", new String[]{},  Material.ANVIL,  false),
    ifInRegion(" ifInRegion", " If in region", new String[]{},  Material.ANVIL,  false),
    ifInWorld(" ifInWorld", " If in world", new String[]{},  Material.ANVIL,  false),
    ifIsInTheBlock(" ifIsInTheBlock", " If is in the block", new String[]{},  Material.ANVIL,  false),
    ifIsNotInTheBlock(" ifIsNotInTheBlock", " If is not in the block", new String[]{},  Material.ANVIL,  false),
    ifIsNotOnTheBlock(" ifIsNotOnTheBlock", " If is not on the block", new String[]{},  Material.ANVIL,  false),
    ifName(" ifName", " If name", new String[]{},  Material.ANVIL,  false),
    ifIsOnTheBlock(" ifIsOnTheBlock", " If is on the block", new String[]{},  Material.ANVIL,  false),
    ifNotEntityType(" ifNotEntityType", " If not entityType", new String[]{},  Material.ANVIL,  false),
    ifLightLevel(" ifLightLevel", " If light level", new String[]{},  Material.ANVIL,  false),
    ifNotHasPermission(" ifNotHasPermission", " If not has permission", new String[]{},  Material.ANVIL,  false),
    ifNotHasTag(" ifNotHasTag", " If not has tag", new String[]{"&7&oThe blacklisted tags"},  Material.ANVIL,  false),
    ifNotInBiome(" ifNotInBiome", " If not in biome", new String[]{},  Material.ANVIL,  false),
    ifNotInRegion(" ifNotInRegion", " If not in region", new String[]{},  Material.ANVIL,  false),
    ifNotInWorld(" ifNotInWorld", " If not in world", new String[]{},  Material.ANVIL,  false),
    ifNotTargetBlock(" ifNotTargetBlock", " If not target block", new String[]{},  Material.ANVIL,  false),
    ifPlayerEXP(" ifPlayerEXP", " If player EXP", new String[]{},  Material.ANVIL,  false),
    ifPlayerFoodLevel(" ifPlayerFoodLevel", " If player food level", new String[]{},  Material.ANVIL,  false),
    ifPlayerHasEffect(" ifPlayerHasEffect", " If player has effect", new String[]{},  Material.ANVIL,  false),
    ifPlayerHasEffectEquals(" ifPlayerHasEffectEquals", " If player has effect equals", new String[]{},  Material.ANVIL,  false),
    ifPlayerHealth(" ifPlayerHealth", " If player health", new String[]{},  Material.ANVIL,  false),
    ifPlayerLevel(" ifPlayerLevel", " If player level", new String[]{},  Material.ANVIL,  false),
    ifPlayerMounts(" ifPlayerMounts", " If player mounts", new String[]{},  Material.ANVIL,  false),
    ifPlayerNotHasEffect(" ifPlayerNotHasEffect", " If player not has effect", new String[]{},  Material.ANVIL,  false),
    ifPlayerNotMounts(" ifPlayerNotMounts", " If player not mounts", new String[]{},  Material.ANVIL,  false),
    ifPosX(" ifPosX", " If player posX", new String[]{},  Material.ANVIL,  false),
    ifPosY(" ifPosY", " If player posY", new String[]{},  Material.ANVIL,  false),
    ifPosZ(" ifPosZ", " If player posZ", new String[]{},  Material.ANVIL,  false),
    ifTargetBlock(" ifTargetBlock", " If target block", new String[]{},  Material.ANVIL,  false),
    ifWeather(" ifWeather", " If weather", new String[]{"&7The whitelisted weathers"},  Material.ANVIL,  false),
    ifWorldTime(" ifWorldTime", " If world time", new String[]{},  Material.ANVIL,  false),
    ifDurability(" ifDurability", " If durability", new String[]{},  Material.ANVIL,  false),
    ifHasEnchant(" ifHasEnchant", " If has enchant", new String[]{"&7If has enchant condition"},  Material.ANVIL,  false),
    ifHasNotEnchant(" ifHasNotEnchant", " If has not enchant", new String[]{"&7If has not enchant condition"},  Material.ANVIL,  false),
    ifUsage(" ifUsage", " If usage", new String[]{},  Material.ANVIL,  false),
    ifEntityHealth("ifEntityHealth", "If entity health", new String[]{}, Material.ANVIL, false),
    ifBlockAge("ifBlockAge", "If block age", new String[]{}, Material.ANVIL, false),
    ifBlockLocationX("ifBlockLocationX", "If block location X", new String[]{}, Material.ANVIL, false),
    ifBlockLocationY("ifBlockLocationY", "If block location Y", new String[]{}, Material.ANVIL, false),
    ifBlockLocationZ("ifBlockLocationZ", "If block location Z", new String[]{}, Material.ANVIL, false),
    isCooldownInTicks(" isCooldownInTicks", " Cooldown in ticks", new String[]{"&7&oIs the cooldown in ticks?"},  null,  false),
    displayCooldownMessage(" displayCooldownMessage", " Display Cooldown Message", new String[]{"&7&oDisplay the cooldown message"},  null,  false),
    cancelEventIfInCooldown(" cancelEventIfInCooldown", " Cancel Event If In Cooldown", new String[]{"&7&oCancel the event if the player is in cooldown?"},  null,  false),
    pauseWhenOffline(" pauseWhenOffline", " Pause When Offline", new String[]{"&7&oPause the cooldown when the player is offline?"},  null,  false),
    cancelEventIfNotValid(" cancelEventIfNotValid", " Cancel event if not valid", new String[]{"&7&oCancel the event if the block is not valid?"},  null,  false),
    cancelEventIfError(" cancelEventIfError", " Cancel Event If Error", new String[]{"&7&oCancel the event if not valid"},  null,  false),
    glowDrop(" glowDrop", " Glow drop", new String[]{"&7&oGlow drop"},  null,  false),
    displayNameDrop(" displayNameDrop", " Display custom name", new String[]{"&7&oDisplay custom name above the item"},  null,  false),
    giveFirstJoin(" giveFirstJoin", " Give first join", new String[]{"&7&oEnable the feature"},  null,  false),
    giveFirstJoinFeatures(" giveFirstJoin", " Give first join features", TM.gA(Text.FEATURES_GIVEFIRSTJOIN_DESCRIPTION), Material.ANVIL, false),
    hideEnchantments(" hideEnchantments", " Hide enchantments", new String[]{"&7&oHide enchantments"},  null,  false),
    hideUnbreakable(" hideUnbreakable", " Hide unbreakable", new String[]{"&7&oHide unbreakable"},  null,  false),
    hideAttributes(" hideAttributes", " Hide attributes", new String[]{"&7&oHide attributes"},  null,  false),
    hidePotionEffects(" hidePotionEffects", " Hide potion effects / banner tags", new String[]{"&7&oHide Potion effects",  "&7&oand banner tags"},  null, false),
    hideUsage(" hideUsage", " Hide usage", new String[]{"&7&oHide usage"},  null,  false),
    hideDye(" hideDye", " Hide dye", new String[]{"&7&oHide dye"},  null,  false),
    hideArmorTrim(" hideArmorTrim", " Hide armor trim", new String[]{"&7&oHide armor trim"},  null,  false),
    hideDestroys(" hideDestroys", " Hide destroys", new String[]{"&7&oHide destroys"},  null,  false),
    hidePlacedOn(" hidePlacedOn", " Hide placed on", new String[]{"&7&oHide placed on"},  null,  false),
    delayInTick(" delayInTick", " Delay in tick", new String[]{"&7&oIs the delay in ticks ?"},  null,  false),
    isAmbient(" isAmbient", " Ambient", new String[]{"&7&oIf the potion effect is ambient"},  null,  false),
    hasParticles(" hasParticles", " Particles", new String[]{"&7&oIf the potion effect has particles"},  null,  false),
    hasIcon(" hasIcon", " Icon", new String[]{"&7&oIf the potion effect has an icon"},  null,  false),
    potionExtended(" potionExtended", " Potion extended", new String[]{"&7&oPotion extended"},  null,  false),
    potionUpgraded(" potionUpgraded", " Potion upgraded", new String[]{"&7&oPotion upgraded"},  null,  false),
    notExecutableItem(" notExecutableItem", " Not Executable Item", new String[]{"&7&oIs this item not an executable item?"},  null,  false),
    cancelEventIfMaxReached(" cancelEventIfMaxReached", " Cancel event if max reached", new String[]{"&7&oCancel event if max reached"},  null,  false),
    periodInTicks(" periodInTicks", " Period in ticks", new String[]{},  GUI.CLOCK,  false),
    cancelItemDrop("cancel-item-drop", " Cancel Item Drop", new String[]{"&7&oCancel the drop of the item"},  null,  false),
    cancelItemPlace("cancel-item-place", " Cancel Item Placement", new String[]{"&7&oCancel the placement of the item"},  null,  false),
    cancelToolInteractions("cancel-tool-interactions", " Cancel Tool Interactions", new String[]{"&7&oCancel the interactions of the tool"},  null,  false),
    cancelConsumption("cancel-consumption", " Cancel Consumption", new String[]{"&7&oThe item can't be",  "&7&oconsumed"},  Material.POTION,  false),
    cancelHorn("cancel-horn", " Cancel Horn", new String[]{"&7&oThe horn can't be",  "&7&ointeracted"},  FixedMaterial.getMaterial(Collections.singletonList("GOAT_HORN")),  false),
    cancelCraft("cancel-item-craft-no-custom", " Cancel Craft", new String[]{"&7&oThe item can't be used",  "&7&oto craft vanilla item"},  FixedMaterial.getMaterial(Arrays.asList("CRAFTING_TABLE", "WORKBENCH")),  false),
    cancelAllCraft("cancel-item-craft", " Cancel All Craft", new String[]{"&7&oThe item can't be used",  "&7&oto craft any item",  "&7&o(Even custom items)"},  FixedMaterial.getMaterial(Arrays.asList("CRAFTING_TABLE", "WORKBENCH")),  false),
    cancelDepositInChest("cancel-deposit-in-chest", " Cancel Deposit in Chest", new String[]{"&7&oThe item can't be",  "&7&oto deposit in a chest"},  Material.CHEST,  false),
    cancelDepositInFurnace("cancel-deposit-in-furnace", " Cancel Deposit in Furnace", new String[]{"&7&oThe item can't be",  "&7&oto deposit in a furnace"},  Material.FURNACE,  false),
    cancelStoneCutter("cancel-stone-cutter", " Cancel Stone Cutter", new String[]{"&7&oThe item can't be",  "&7&oplaced in stone cutter"},  FixedMaterial.getMaterial(Collections.singletonList("STONECUTTER")),  false),
    cancelEnchant("cancel-enchant", " Cancel Enchant", new String[]{"&7&oThe item can't be",  "&7&oenchanted"},  FixedMaterial.getMaterial(Arrays.asList("ENCHANTING_TABLE", "ENCHANTMENT_TABLE")),  false),
    cancelBrewing("cancel-brewing", " Cancel Brewing", new String[]{"&7&oThe item can't be",  "&7&oplaced in a brewing stand"},  FixedMaterial.getBrewingStand(),  false),
    cancelAnvil("cancel-anvil", " Cancel Anvil", new String[]{"&7&oThe item can't be",  "&7&oplaced in an anvil"},  Material.ANVIL,  false),
    cancelActionEnchantInAnvil("cancel-enchant-anvil", " Cancel Action Enchant in Anvil", new String[]{"&7&oThe item can't be",  "&7&oenchanted in an anvil"},  Material.ANVIL,  false),
    cancelActionRenameInAnvil("cancel-rename-anvil", " Cancel Action Rename in Anvil", new String[]{"&7&oThe item can't be",  "&7&orenamed in an anvil"},  Material.ANVIL,  false),
    cancelBeacon("cancel-beacon", " Cancel Beacon", new String[]{"&7&oThe item can't be",  "&7&oplaced in a beacon"},  Material.BEACON,  false),
    cancelCartography("cancel-cartography", " Cancel Cartography", new String[]{"&7&oThe item can't be",  "&7&oplaced in a cartography table"},  FixedMaterial.getMaterial(Collections.singletonList("CARTOGRAPHY_TABLE")),  false),
    cancelComposter("cancel-composter", " Cancel Composter", new String[]{"&7&oThe item can't be",  "&7&oplaced in a composter"},  FixedMaterial.getMaterial(Collections.singletonList("COMPOSTER")),  false),
    cancelDispenser("cancel-dispenser", " Cancel Dispenser", new String[]{"&7&oThe item can't be",  "&7&oplaced in a dispenser"},  Material.DISPENSER,  false),
    cancelDropper("cancel-dropper", " Cancel Dropper", new String[]{"&7&oThe item can't be",  "&7&oplaced in a dropper"},  Material.DROPPER,  false),
    cancelHopper("cancel-hopper", " Cancel Hopper", new String[]{"&7&oThe item can't be",  "&7&oplaced in a hopper"},  Material.HOPPER,  false),
    cancelLectern("cancel-lectern", " Cancel Lectern", new String[]{"&7&oThe item can't be",  "&7&oplaced in a lectern"},  Material.LECTERN,  false),
    cancelLoom("cancel-loom", " Cancel Loom", new String[]{"&7&oThe item can't be",  "&7&oplaced in a loom"},  FixedMaterial.getMaterial(Collections.singletonList("LOOM")),  false),
    cancelMerchant("cancel-merchant", " Cancel Merchant", new String[]{"&7&oThe item can't be",  "&7&oplaced in a merchant"},  FixedMaterial.getMaterial(Arrays.asList("VILLAGER_SPAWN_EGG", "EMERALD")),  false),
    cancelHorse("cancel-horse", " Cancel Horse", new String[]{"&7&oThe item can't be",  "&7&oplaced in a horse"},  FixedMaterial.getMaterial(Arrays.asList("HORSE_SPAWN_EGG", "SADDLE")),  false),
    cancelItemBurn("cancel-item-burn", " Cancel Item Burn", new String[]{"&7&oThe item can't be",  "&7&oburned"},  null,  false),
    cancelItemDeleteByCactus("cancel-item-delete-by-cactus", " Cancel Item Delete by Cactus", new String[]{"&7&oThe item can't be",  "&7&odeleted by cactus"},  Material.CACTUS,  false),
    cancelItemDeleteByLightning("cancel-item-delete-by-lightning", " Cancel Item Delete by Lightning", new String[]{"&7&oThe item can't be",  "&7&odeleted by lightning"},  Material.LIGHTNING_ROD,  false),
    cancelSwapHand("cancel-swap-hand", " Cancel Swap Hand", new String[]{"&7&oThe item can't be",  "&7&oswapped in the hand"},  null,  false),
    lockedInventory("locked-in-inventory", " Locked Inventory", new String[]{"&7&oThe item can't be",  "&7&oplaced in the inventory"},  Material.BARRIER,  false),
    cancelArmorStand("cancel-armorstand", " Cancel ArmorStand", new String[]{"&7&oThe item can't be",  "&7&oplaced on an armorstand"},  Material.ARMOR_STAND,  false),
    cancelItemFrame("cancel-item-frame", " Cancel Item Frame", new String[]{"&7&oThe item can't be",  "&7&oplaced in an item frame"},  Material.ITEM_FRAME,  false),
    cancelGrindStone("cancel-grind-stone", " Cancel Grind Stone", new String[]{"&7&oThe item can't be",  "&7&oplaced in a grind stone"},  FixedMaterial.getMaterial(Collections.singletonList("GRINDSTONE")),  false),
    cancelSmithingTable("cancel-smithing-table", " Cancel Smithing Table", new String[]{"&7&oThe item can't be",  "&7&oplaced in a smithing table"},  FixedMaterial.getMaterial(Collections.singletonList("SMITHING_TABLE")),  false),


    southValue(" southValue", " TM.g(Text.FEATURES_AROUNDBLOCK_FEATURES_SOUTHVALUE_NAME)", TM.gA(Text.FEATURES_AROUNDBLOCK_FEATURES_SOUTHVALUE_DESCRIPTION),  GUI.CLOCK,  false),
    northValue(" northValue", " TM.g(Text.FEATURES_AROUNDBLOCK_FEATURES_NORTHVALUE_NAME) ", TM.gA(Text.FEATURES_AROUNDBLOCK_FEATURES_NORTHVALUE_DESCRIPTION),  GUI.CLOCK,  false),
    westValue(" westValue", " TM.g(Text.FEATURES_AROUNDBLOCK_FEATURES_WESTVALUE_NAME)", TM.gA(Text.FEATURES_AROUNDBLOCK_FEATURES_WESTVALUE_DESCRIPTION),  GUI.CLOCK,  false),
    eastValue(" eastValue", " TM.g(Text.FEATURES_AROUNDBLOCK_FEATURES_EASTVALUE_NAME)", TM.gA(Text.FEATURES_AROUNDBLOCK_FEATURES_EASTVALUE_DESCRIPTION),  GUI.CLOCK,  false),
    aboveValue(" aboveValue", " TM.g(Text.FEATURES_AROUNDBLOCK_FEATURES_ABOVEVALUE_NAME)", TM.gA(Text.FEATURES_AROUNDBLOCK_FEATURES_ABOVEVALUE_DESCRIPTION),  GUI.CLOCK,  false),
    underValue(" underValue", " TM.g(Text.FEATURES_AROUNDBLOCK_FEATURES_UNDERVALUE_NAME)", TM.gA(Text.FEATURES_AROUNDBLOCK_FEATURES_UNDERVALUE_DESCRIPTION),  GUI.CLOCK,  false),
    cooldown(" cooldown", " Cooldown", new String[]{"&7&oThe cooldown"},  GUI.CLOCK,  false),
    level(" level", " Level", new String[]{"&7&oThe level of the enchantment"},  Material.BEACON,  false),
    giveFirstJoinAmount(" giveFirstJoinAmount", " Amount", new String[]{"&7&oThe amount to give"},  GUI.CLOCK,  false),
    giveFirstJoinSlot(" giveFirstJoinSlot", " Slot", new String[]{"&7&oSlot between 0 and 8 includes"},  GUI.CLOCK,  false),
    amount(" amount", " Amount", new String[]{"&7&oThe amount"},  GUI.CLOCK,  false),
    delay(" delay", " Delay", new String[]{"&7&oDelay between each activation",  "&cMin: &65 ticks"},  GUI.CLOCK,false),
    particlesAmount(" particlesAmount", " Particles amount", new String[]{"&7&oThe amount of the particle"},  GUI.COMPARATOR,  false),
    particlesDelay(" particlesDelay", " Particles delay", new String[]{"&7&oThe delay of the particle"},  GUI.COMPARATOR,  false),
    particlesDensity(" particlesDensity", " Particles density", new String[]{"&7&oThe density of the particle"},  GUI.COMPARATOR,  false),
    amplifier(" amplifier", " Amplifier", new String[]{"&7&oThe amplifier of the potion effect"},  GUI.CLOCK,  false),
    duration(" duration", " Duration", new String[]{"&7&oThe duration of the potion effect",  "&4⚠ &cIn ticks !",  "&7&o1 sec = 20 ticks"}, GUI.CLOCK,false),
    requiredExperience(" requiredExperience", " Required Experience", new String[]{"&7&oRequired experience"},  FixedMaterial.getMaterial(Arrays.asList("EXPERIENCE_BOTTLE",  "EXP_BOTTLE")), true),
    requiredLevel(" requiredLevel", " Required Level", new String[]{"&7&oRequired level"},  FixedMaterial.getMaterial(Arrays.asList("EXPERIENCE_BOTTLE",  "EXP_BOTTLE")), true),
    requiredMana(" requiredMana", " Required Mana", new String[]{"&7&oRequired mana", "&4&lRequire: &6AureliumSkills/MMOCore"},   Material.WATER_BUCKET,  true),
    maxUsePerDay(" maxUsePerDay", " Max use per day", new String[]{"&7&oMax use per day",  "&a-1 &7&o= infinite"},  Material.BUCKET, true),
    usePerDay(" usePerDay", " Use per day",  TM.gA(Text.FEATURES_USEPERDAY_DESCRIPTION), Material.BUCKET, true),
    period(" period", " Period", new String[]{},  GUI.CLOCK,  false),
    lifeTime(" lifeTime", " Life time", new String[]{"&7&oThe life time of the firework in ticks"},  GUI.CLOCK,  false),

    titleAdjustement(" titleAdjustement", " Title adjustement", new String[]{"&7&oTitle adjustement"},  Material.PISTON,  true),
    particlesOffSet(" particlesOffSet", " Particles offset", new String[]{"&7&oThe offset of the particle"},  GUI.COMPARATOR,  false),
    particlesSpeed(" particlesSpeed", " Particles speed", new String[]{"&7&oThe speed of the particle"},  GUI.COMPARATOR,  false),
    requiredMoney(" requiredMoney", " Required Money",  new String[]{"&7&oRequired money", "&4&lRequire: &6Vault"}, Material.GOLD_BLOCK, true),
    default_string(" default", "String Value", new String[]{"&7&oThe variable default value"},  GUI.WRITABLE_BOOK,  false),
    default_list(" default", "List Value", new String[]{"&7&oThe variable default value"},  GUI.WRITABLE_BOOK,  false),
    default_double(" default", "Number Value", new String[]{"&7&oThe variable default value"},  GUI.WRITABLE_BOOK,  false),
    modification_double(" modification", " Double Update", new String[]{"&7&oThe number update"},  GUI.WRITABLE_BOOK,  false),
    blocks("blocks", "Blocks", new String[]{"&7&oBlocks"}, FixedMaterial.getMaterial(Arrays.asList("GRASS_BLOCK", "GRASS")), false),
    removeWhenHitBlock(" removeWhenHitBlock", " Remove when hit block", new String[]{"&7&oRemove when hit block"},  null,  false),
    knockbackStrength(" knockbackStrength", "Knockback Strength", new String[]{}, Material.CHAINMAIL_CHESTPLATE, false),
    charged(" charged", " Charged", new String[]{""},  Material.NETHER_STAR, false),
    visualItem(" visualItem", " Visual Item", new String[]{""},  Material.ITEM_FRAME, false),
    title(" title", " Title", new String[]{"&7&oThe title"},  Material.NAME_TAG, true),
    glowing(" glowing", " Glowing", new String[]{}, Material.BEACON, false),
    invisible(" invisible", " Invisible", new String[]{}, FixedMaterial.getMaterial(Arrays.asList("GLASS_PANE", "GLASS")), false),


    errorMsg(" errorMsg", TM.g(Text.FEATURES_AROUNDBLOCK_FEATURES_ERRORMESSAGE_NAME), TM.gA(Text.FEATURES_AROUNDBLOCK_FEATURES_ERRORMESSAGE_DESCRIPTION),  GUI.WRITABLE_BOOK,  false),
    name(" name", " Name", new String[]{"&7&oThe name or display name"},  Material.NAME_TAG,  false),

    cooldownMsg(" cooldownMsg", " Cooldown Message", new String[]{"&7&oThe cooldown message"},  GUI.WRITABLE_BOOK,  false),
    messageIfNotValid(" messageIfNotValid", " Message if not valid", new String[]{"&7&oMessage if the condition is not valid?"},  GUI.WRITABLE_BOOK,  false),
    messageIfNotValidForTarget(" messageIfNotValidForTarget", " Message if not valid For Target", new String[]{"&7&oThe message to display if", "&7&othe condition is not valid for the target"},  GUI.WRITABLE_BOOK,  false),
    errorMessage(" errorMessage", " Error message", new String[]{"&7&oThe error message"},  GUI.WRITABLE_BOOK,  false),
    messageIfMaxReached(" messageIfMaxReached", " Message if max reached", new String[]{"&7&oMessage if max reached"},  GUI.WRITABLE_BOOK,  false),
    modification_string(" modification", " String Update", new String[]{"&7&oThe string update"},  GUI.WRITABLE_BOOK,  false),
    stopCheckingOtherConditionsIfNotValid(" stopCheckingOtherConditionsIfNotValid", " Stop checking other conditions if not valid", new String[]{"&7&oStop checking other conditions", "&7&oif the condition is not valid"},  GUI.WRITABLE_BOOK,  false),
    placeholderConditionCmds(" placeholderConditionCmds", " Console Commands If Invalid", new String[]{"&7&oConsole Commands If Error"},  FixedMaterial.getMaterial(Arrays.asList("COMMAND_BLOCK", "WRITABLE_BOOK", "BOOK_AND_QUILL")),  false),
    placeholderCondition(" placeholderCondition", " Placeholder Condition", new String[]{"&7&oA Placeholder condition with its options"}, GUI.WRITABLE_BOOK, false),
    placeholdersConditions("placeholdersConditions", "Placeholders Conditions", new String[]{"&7&oThe placeholders conditions"}, Material.ANVIL, false),
    material(" material", " Material", new String[]{"&7&oThe material"},  Material.STONE,  false),
    blockType(" blockType", " Block type", new String[]{"&7&oThe type of the block"},  Material.STONE,  false),
    icon(" icon", " Icon", new String[]{},  Material.STONE,  false),

    type(" type", " Type", new String[]{"&7&oThe type"},  Material.COMPARATOR,  false),
    for_( " for", " For", new String[]{"&7&oFor"},  Material.COMPARATOR,  false),


    headValue(" headValue", " Head Value", new String[]{"&7&oThe value of the head",  "&eminecraft-heads.com"},  FixedMaterial.getHead(), false),
    headDBID(" headDBID", " HeadDB ID", new String[]{"&7&oThe HeadDB ID of the head",  "&7&oWork with: ",  "&7&o- &bHeadDB(Free)", "&7&o- &cHead Database(Prem)"},FixedMaterial.getHead(),true),
    tags(" tags", " Tags", new String[]{"&7&oThe tags", "&8&oExamples", "&a{age:3}", "&a{lit:true}", "&7&ominecraft.fandom.com/wiki/Block_states"},GUI.WRITABLE_BOOK, false),
    string(" string", " String", new String[]{"&7&oA string"},  Material.PAPER,  false),
    magicID(" magicID", " Magic ID", new String[]{"&7&oThe Magic ID"},  Material.STONE,  false),
    variableName(" variableName", " Variable Name", new String[]{"&7&oThe variable name", "&7&othat you want create/modify"},  GUI.WRITABLE_BOOK,  false),
    variables("variables", "Variables", TM.gA(Text.FEATURES_VARIABLES_DESCRIPTION), GUI.WRITABLE_BOOK, false),
    variable("variable", "Variable", new String[]{"&7&oA variable with its options"}, GUI.WRITABLE_BOOK, false),
    VARIABLE("VARIABLE", "VARIABLE", new String[]{}, GUI.WRITABLE_BOOK, false),
    SPROJECTILE("SPROJECTILE", "SPROJECTILE", new String[]{}, Material.ARROW, false),
    HARDNESS("HARDNESS", "HARDNESS", new String[]{}, Material.BEDROCK, false),
    variablesModification("variablesModification", "Variables", new String[]{"&7&oThe variables"}, GUI.WRITABLE_BOOK, false),
    variableUpdate("variableUpdate", "Variable Update", new String[]{"&7&oA variable update with its options"}, GUI.WRITABLE_BOOK, false),

    object(" object", " Object", new String[]{"&7&oAn Object"},  Material.PAPER,  false),

    activator(" activator", TM.g(Text.FEATURES_ACTIVATOR_NAME), TM.gA(Text.FEATURES_ACTIVATOR_DESCRIPTION),  Material.BEACON,  false),
    activators(" activators", TM.g(Text.FEATURES_ACTIVATORS_NAME), TM.gA(Text.FEATURES_ACTIVATORS_DESCRIPTION),  Material.BEACON,  false),
    armorTrim(" armorTrim",  "Armor Trim", TM.gA(Text.FEATURES_ARMORTRIM_DESCRIPTION),  FixedMaterial.getMaterial(Arrays.asList("COAST_ARMOR_TRIM_SMITHING_TEMPLATE")),  false),
    trimMaterial(" trimMaterial", " Trim Material", new String[]{"&7&oThe material used to trim the armor"}, Material.DIAMOND,  false),
    pattern(" pattern", " Pattern", new String[]{"&7&oThe pattern used to trim the armor"}, FixedMaterial.getMaterial(Arrays.asList("EYE_ARMOR_TRIM_SMITHING_TEMPLATE")),  false),
    aroundBlock("AroundBlock", TM.g(Text.FEATURES_AROUNDBLOCK_NAME), TM.gA(Text.FEATURES_AROUNDBLOCK_DESCRIPTION), Material.STONE, false),
    aroundBlockCdts("blockAroundCdts", TM.g(Text.FEATURES_AROUNDBLOCKS_NAME), TM.gA(Text.FEATURES_AROUNDBLOCKS_DESCRIPTION), Material.STONE, false),
    attribute(" attribute", " Attribute", new String[]{"&7&oEdit the attribute"},  Material.PAPER,  false),
    attributes(" attributes", " Attributes", TM.gA(Text.FEATURES_ATTRIBUTES_DESCRIPTION),  Material.PAPER,  false),
    operation(" operation", " Operation", new String[]{"&7&oThe operation"},  Material.DISPENSER,  false),
    slot(" slot", " Slot", new String[]{"&7&oThe slot"},  Material.ARMOR_STAND,  false),
    uuid(" uuid", " UUID", new String[]{"&7&oThe UUID"},  Material.NAME_TAG,  false),
    bannerSettings(" bannerSettings", " Banner Settings", new String[]{"&7&oBanner settings"},  FixedMaterial.getMaterial(Arrays.asList("CREEPER_BANNER_PATTERN", "BANNER")),  false),
    color(" color", " Color", new String[]{"&7&oThe color"},  FixedMaterial.getMaterial(Arrays.asList("RED_DYE", "INK_SACK")),  false),
    titleOptions(" titleOptions", " Title Options", new String[]{"&7&oThe title features"},  Material.ANVIL,  true),
    cancelEvents(" cancelEvents", " Cancel Events", new String[]{"&7&oThe cancel events features"},  Material.ANVIL,  false),
    detailedBlocks(" detailedBlocks", " Detailed Blocks", new String[]{"&7&oMake the activator run", "&7&oonly for certain blocks", "&7&oempty = all blocks"}, FixedMaterial.getMaterial(Arrays.asList("GRASS_BLOCK", "GRASS")), false),
    detailedEffects(" detailedEffects", " Detailed Effects", new String[]{"&7&oMake the activator run", "&7&oonly for certain effects", "&7&oempty = all effects"}, FixedMaterial.getMaterial(Arrays.asList("POTION", "REDSTONE")), false),
    detailedItems(" detailedItems", " Detailed Items", new String[]{"&7&oMake the activator run", "&7&oonly for certain items", "&7&oempty = all items"}, FixedMaterial.getMaterial(Arrays.asList("TORCH")), false),
    detailedSlots(" detailedSlots", " Detailed Slots", new String[]{"&7&oThe slots where the", "&7&oactivator will work"}, Material.ARMOR_STAND, false),
    dropOptions(" dropOptions", " Drop Options", TM.gA(Text.FEATURES_DROPS_DESCRIPTION), Material.ANVIL, false),
    glowDropColor(" glowDropColor", " Glow Drop Color", new String[]{"&7&oThe color of the glow"}, Material.REDSTONE, true),
    enchantments(" enchantments", " Enchantments", TM.gA(Text.FEATURES_ENCHANTMENTS_DESCRIPTION), Material.ENCHANTED_BOOK, false),
    enchantment(" enchantment", " Enchantment", new String[]{"&7&oThe enchantment"}, Material.ENCHANTED_BOOK, false),
    enchantmentWithLevel(" enchantmentWithLevel", " Enchantment with level", new String[]{"&7&oAn enchantment with level"}, Material.ENCHANTED_BOOK, false),
    entityType(" entityType", " Entity Type", new String[]{"&7&oThe entity type"}, FixedMaterial.getMaterial(Arrays.asList("ZOMBIE_HEAD", "MONSTER_EGG")), false),
    headFeatures(" headFeatures", " Head Features", new String[]{"&7&oTextures for the head"}, FixedMaterial.getHead(), false),
    hiders(" hiders", " Hiders", TM.gA(Text.FEATURES_HIDERS_DESCRIPTION), Material.ANVIL, false),
    hasExecutableItem(" hasExecutableItem", " Has Executable Item", new String[]{"&7&oThe has ExecutableItem feature"}, Material.DIAMOND, false),
    executableItem(" executableItem", " Executable Item", new String[]{"&7&oThe ExecutableItem"}, Material.DIAMOND, false),
    usageConditions(" usageConditions", " Usage Conditions", new String[]{"&7&oThe usage condition"}, GUI.CLOCK, false),
    multiChoices(" multi-choices", " Multi Choices",  new String[]{}, Material.DIAMOND, false),
    hasItem(" hasItem", " Has Item", new String[]{"&7&oThe has item feature"}, Material.STONE, false),
    loop(" loop", " Loop features", new String[]{"&7&oSpecific settings", "&7&ofor the loop activator"}, Material.ANVIL, false),
    materialAndTags(" materialAndTags", " Material and Tags", new String[]{"&7&oThe material and tags"}, Material.STONE, false),
    particles(" particles", " Particles", new String[]{"&7&oThe particles"}, Material.BLAZE_POWDER, false),
    particle(" particle", " Particle", new String[]{"&7&oA custom particle"}, Material.BLAZE_POWDER, false),
    particlesType(" particlesType", " Particles Type", new String[]{"&7&oThe particles type"}, Material.BLAZE_POWDER, false),
    redstoneColor(" redstoneColor", " Redstone Color", new String[]{"&7&oThe redstone color"}, Material.REDSTONE, false),
    patterns(" patterns", " Patterns", new String[]{"&7&oThe patterns"}, Material.ANVIL, false),
    subPatterns(" subPatterns", " Sub Patterns", new String[]{"&7&oThe sub patterns"}, Material.ANVIL, false),
    subPattern(" subPattern", " Sub Pattern", new String[]{"&7&oA sub pattern with its options"}, Material.ANVIL, false),
    potionEffects(" potionEffects", " Potion Effects", new String[]{"&7&oThe potion effects"}, FixedMaterial.getBrewingStand(), false),
    potionEffect(" potionEffect", " Potion Effect", new String[]{"&7&oA potion effect with its options"}, FixedMaterial.getBrewingStand(), false),
    potionEffectType(" potionEffectType", " Potion Effect Type", new String[]{"&7&oThe type of the potion effect"}, Material.COMPASS, false),
    potionSettings(" potionSettings", " Potion Settings", new String[]{"&7&oThe potion settings"}, FixedMaterial.getBrewingStand(), false),
    potionColor(" potionColor", " Potion Color", new String[]{"&7&oThe potion color"}, Material.REDSTONE, false),
    potionType(" potionType", " Potion Type", new String[]{"&7&oThe potion type"}, Material.POTION, false),
    requiredExecutableItems(" requiredExecutableItems", " Required Executable Items", new String[]{"&7&oThe required executable items"}, Material.DIAMOND_PICKAXE, true),
    requiredExecutableItem(" requiredExecutableItem", " Required Executable Item", new String[]{"&7&oA required ExecutableItem"}, Material.PAPER, false),
    requiredItems(" requiredItems", " Required Items", new String[]{"&7&oThe required items"}, Material.DIAMOND, true),
    requiredItem(" requiredItem", " Required Item", new String[]{"&7&oA required item"}, Material.PAPER, false),
    requiredMagics(" requiredMagics", " Required Magics", new String[]{"&7&oThe required Magics", "&7&o(from EcoSkills)"}, GUI.WRITABLE_BOOK, true),
    requiredMagic(" requiredMagic", " Required Magic", new String[]{"&7&oA required Magic", "&7&o(from EcoSkills)"}, GUI.WRITABLE_BOOK, false),
    fireworkFeatures("fireworkFeatures", "Firework Features", new String[]{}, FixedMaterial.getMaterial(Arrays.asList("FIREWORK_ROCKET")), false),
    critical(" critical", " Critical", new String[]{}, Material.DIAMOND_AXE, false),
    customModelData(" customModelData", " Custom Model Data", new String[]{"&7&oThe custom model data"}, Material.ITEM_FRAME, false),

    comparator(" comparator", " Comparator", new String[]{"&7&oThe comparator of the condition"}, Material.COMPASS, false),
    part1(" part1", " Part 1", new String[]{"&7&oThe first part of the condition"}, GUI.WRITABLE_BOOK, false),
    part2(" part2", " Part 2", new String[]{"&7&oThe second part of the condition"}, GUI.WRITABLE_BOOK, false),

    effects(" effects", " Effects", new String[]{"&7&oThe effects"}, FixedMaterial.getMaterial(Arrays.asList("POTION", "REDSTONE")), false),
    colors(" colors", "Colors", new String[]{"&7&oThe colors of the firework"}, GUI.CLOCK, false),
    fadeColors(" fadeColors", " Fade Colors", new String[]{"&7&oThe fade colors of the firework"}, GUI.CLOCK, false),


    pickupStatus(" pickupStatus", " Pickup Status", new String[]{""}, FixedMaterial.getMaterial(Arrays.asList("LEAD", "LEASH")), false),
    items(" items", " Items", new String[]{"&7&oItems"}, FixedMaterial.getMaterial(Arrays.asList("TORCH")), false),
    pausePlaceholdersConditions(" pausePlaceholdersConditions", " Pause Placeholders Conditions", new String[]{"&7&oThe placeholders conditions to pause the cooldown"}, Material.ANVIL, false),
    pierceLevel(" pierceLevel", "Pierce level", new String[]{}, Material.TIPPED_ARROW, false),
    blockTypeMustBe(" blockTypeMustBe", TM.g(Text.FEATURES_AROUNDBLOCK_FEATURES_BLOCKTYPEMUSTBE_NAME), TM.gA(Text.FEATURES_AROUNDBLOCK_FEATURES_BLOCKTYPEMUSTBE_DESCRIPTION), GUI.WRITABLE_BOOK, false),
    customNameVisible(" customNameVisible", " Custom Name Visible", new String[]{}, Material.NAME_TAG, false),
    customName(" customName", " Custom Name", new String[]{}, Material.NAME_TAG, false),
    restrictions(" restrictions", " Restrictions", TM.gA(Text.FEATURES_RESTRICTIONS_DESCRIPTION), Material.ANVIL, false),
    gravity(" gravity", " Gravity", new String[]{}, FixedMaterial.getMaterial(Arrays.asList("ELYTRA", "FEATHER")), false),
    silent(" silent", " Silent", new String[]{}, FixedMaterial.getMaterial(Arrays.asList("BELL", "JUKEBOW")), false),
    requiredGroups(" requiredGroups", "Required Things", new String[]{"&7&oRequired things"}, Material.ANVIL, false),
    despawnDelay(" despawnDelay", " Despawn Delay", new String[]{"&7&o-1 for vanilla despawn"}, Material.DEAD_BUSH, false),
    visualFire(" visualFire", " Visual Fire", new String[]{}, Material.FLINT_AND_STEEL, false),
    velocity(" velocity", " Velocity", new String[]{}, FixedMaterial.getMaterial(Arrays.asList("FIREWORK_ROCKET", "ELYTRA")), false),
    incendiary(" incendiary", " Incendiary", new String[]{},FixedMaterial.getMaterial(Arrays.asList("CAMPFIRE", "FLINT_AND_STEEL")), false),
    radius(" radius", " Radius", new String[]{}, FixedMaterial.getMaterial(Arrays.asList("HEART_OF_THE_SEA", "WEB")), false),
    damage(" damage", " Damage", new String[]{"&7&o-1 for vanilla damage"}, Material.DIAMOND_SWORD, false),
    bounce(" bounce", " Bounce", new String[]{}, Material.SLIME_BLOCK, false),
    ;


    private String configName;
    private String editorName;
    private String[] editorDescription;
    private Material editorMaterial;
    private boolean requirePremium;

    FeatureSettingsSCore(String name, String editorName, String[] editorDescription, Material editorMaterial, boolean requirePremium) {
        this.configName = name;
        this.editorName = editorName;
        this.editorDescription = editorDescription;
        this.editorMaterial = editorMaterial;
        this.requirePremium = requirePremium;
    }

    @Override
    public String getName() {
        return configName;
    }

    @Override
    public String getEditorName() {
        return editorName;
    }

    @Override
    public String[] getEditorDescription() {
        return editorDescription;
    }

    @Override
    public Material getEditorMaterial() {
        return editorMaterial;
    }

    @Override
    public boolean isRequirePremium() {
        return requirePremium;
    }
}
